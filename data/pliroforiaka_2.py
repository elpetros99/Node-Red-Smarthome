# -*- coding: utf-8 -*-
"""Pliroforiaka_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JvX6GQfyG-l1rn16z0YIx5cY7XA9Ow8B
"""

import requests
import json
import time
import sys
from datetime import datetime
from datetime import timedelta

def send_events(data):
  # print(list(data.keys())[0], file=sys.stderr)
  # get the response and print it
  r = requests.post(url = URL, json = data)
  print("Response text is:", data)#r.text)

def make_json(event):
  if event[-1] == ',': 
      e = '{' + event[:-1] + '}'
  else:                    
      e = '{' + event + '}'
  # json.loads creates a dict if string is valid
  data = json.loads(e)
  return data

def find_date(data):
  heterogeneous_date_time1= str(list(data.keys())[0])
  date_format_str = '%Y-%m-%d %H:%M:%S'
  
  given_time1 = datetime.strptime(heterogeneous_date_time1, date_format_str)
  return given_time1

# kafka producer
URL = "http://localhost:8765/events"
# how many minutes the simulator waits in order to send again a new request
MINS_INTERVAL = 0.1

def main():
    # read all simulation data
    with open('events.json', 'r') as f:
        events = f.read().strip().split('\n')
        
    events1=events[1:-1]
    # for every event
    i=0
    while (i<len(events1)):
    # for i in range(len(events1)):
        event=events1[i]
        # print(event, file=sys.stderr)
        
        data = make_json(event)
        
        #send current record's data 
        send_events(data)
        i+=1
        #find current record time
        now_date=find_date(data)
        # print(now_date)
        #next second's date
        final_time = now_date + timedelta(minutes=15)
        # print(final_time)
        #checks next events
        temp=i
        temp_event=events1[temp]
        temp_event_data=make_json(temp_event)
        next_time=find_date(temp_event_data)
        # if next_time != final_time:
        #   continue
        while(next_time < final_time):
          # print(temp,i,next_time,final_time)
          send_events(temp_event_data)
          temp+=1
          temp_event=events1[temp]
          temp_event_data=make_json(temp_event)
          next_time=find_date(temp_event_data)
          final_time = now_date + timedelta(minutes=15)
        # print(i, temp)
        i=temp
        # print(list(data.keys())[0], file=sys.stderr)
        # get the response and print it
        # r = requests.post(url = URL, json = data)
        # print("Response text is:", data)#r.text)
        
        time.sleep(MINS_INTERVAL)
    
    print("Simulation completed.")

if __name__ == "__main__":
    main()





