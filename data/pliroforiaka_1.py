# -*- coding: utf-8 -*-
"""Pliroforiaka_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I3AMmk0RU34gso0rCVWT9RprMzdaGoqa
"""

import sys
import json
import random
from datetime import datetime
from datetime import timedelta

f = open("events.json", "w")
sys.stdout = f

# DEVICES
#
# Input Devices:
#   temperature sensors TH1,TH2
#   hvac sensors HVAC1,HVAC2
#   sensorSmoke
#   sensorLight1, sensorLight0, sensorLight4
#   sensorMotion1, sensorMotion4
#   sensorMagnet0, sensorMagnet1, sensorMagnet2, sensorMagnet3
#   alarm
#
# Output devices:
#   siren
#   lamp0, lamp1, lamp2, lamp3, lamp4
#   thermostat
#   ac0, ac1
#   waterHeater 
#   vacuum 
#   switch0, switch1

days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']

state = {"TH1" : { "temp" : 0, "tempDif" : 0 }, #Thermokrasia 1
         "TH2" : { "temp" : 0, "tempDif" : 0 }, #Thermokrasia 2
         "HVAC1" : { "energy" : 0, "energyDif" : 0 }, #Energia air condition 1
         "HVAC2" : { "energy" : 0, "energyDif" : 0 }, #Energia air condition 2
         "MiAC1" : { "energy" : 0, "energyDif" : 0 }, #Loipes ileektronikes siskeves 1
         "MiAC2" : { "energy" : 0, "energyDif" : 0 }, #Loipes ileektronikes siskeves 2
         "Etot" : { "energy" : 0, "energyDif" : 0 }, #Sinoliki Energia
         "W1" : { "water" : 0, "waterDif" : 0 }, #Katanalosi nerou se 1 topo
         "Wtot" : { "water" : 0, "waterDif" : 0 }, #Katanalosi nerou pantou
         "alarm" : { "status" : 0 }
         }
state_move={"Mov1" : { "status" : 0 },"alarm" : { "status" : 0 }}

def sensorTemp(state): # temperature changes and the warmest time of the day is 13:30, Monday is on average the coldest day and Sunday is on average the warmest day
    prev_temp_0 = state["TH1"]["temp"]
    prev_temp_1 = state["TH2"]["temp"]

    state["TH1"]["temp"] = int(25 - 0.75*( abs(hour - 13.5 + mins/60))) + days.index(day) 
    if ((days.index(day) == 6) and (hour + mins/60) >= 16 and (hour + mins/60) <= 16.5): # On Sunday at 16:00 the temperature sensor malfunctioned
        state["TH2"]["temp"] = -1
    else:
        state["TH2"]["temp"] = int(25 - 0.75*( abs(hour - 13.5 + mins/60))) + days.index(day) 
    state["TH1"]["tempDif"] = state["TH1"]["temp"] - prev_temp_0
    state["TH2"]["tempDif"] = state["TH2"]["temp"] - prev_temp_1
    state["alarm"]["status"] = 0
    if((days.index(day) == 0) and hour==0 and mins==0):
        state["TH1"]["tempDif"] = 0
        state["TH2"]["tempDif"] = 0

def sensorMiAC(state): # temperature changes and the warmest time of the day is 13:30, Monday is on average the coldest day and Sunday is on average the warmest day
    prev_temp_0 = state["MiAC1"]["energy"]
    prev_temp_1 = state["MiAC2"]["energy"]

    state["MiAC1"]["energy"] = int(100 - 0.75*( abs(hour - 13.5 + mins/60))) + days.index(day) 
    if ((days.index(day) == 4) and (hour + mins/60) >= 16 and (hour + mins/60) <= 16.5): # On Friday at 16:00 the temperature sensor malfunctioned
        state["MiAC2"]["energy"] = 250
    else:
        state["MiAC2"]["energy"] = int(180 - 0.75*( abs(hour - 13.5 + mins/60))) + days.index(day) 
    state["MiAC1"]["energyDif"] = state["MiAC1"]["energy"] - prev_temp_0
    state["MiAC2"]["energyDif"] = state["MiAC2"]["energy"] - prev_temp_1
    if((days.index(day) == 0) and hour==0 and mins==0):
        state["MiAC1"]["energyDif"] = 0
        state["MiAC2"]["energyDif"] = 0

def sensorHVAC(state): # temperature changes and the warmest time of the day is 13:30, Monday is on average the coldest day and Sunday is on average the warmest day
    prev_temp_0 = state["HVAC1"]["energy"]
    prev_temp_1 = state["HVAC2"]["energy"]

    state["HVAC1"]["energy"] = int(100 - 0.75*( abs(hour - 13.5 + mins/60))) + days.index(day) 
    if ((days.index(day) == 3) and (hour + mins/60) >= 16 and (hour + mins/60) <= 16.5): # On Thursday at 13:00 the temperature sensor malfunctioned
        state["HVAC2"]["energy"] = 250
        state["alarm"]["status"]=1
    else:
        state["HVAC2"]["energy"] = int(200 - 0.75*( abs(hour - 13.5 + mins/60))) + days.index(day) 
    state["HVAC1"]["energyDif"] = state["HVAC1"]["energy"] - prev_temp_0
    state["HVAC2"]["energyDif"] = state["HVAC2"]["energy"] - prev_temp_1
    if((days.index(day) == 0) and hour==0 and mins==0):
        state["HVAC1"]["energyDif"] = 0
        state["HVAC2"]["energyDif"] = 0

def sensorEtot(state): # temperature changes and the warmest time of the day is 13:30, Monday is on average the coldest day and Sunday is on average the warmest day
    prev_temp = state["Etot"]["energy"]
    if(hour==0 and mins==0):
      #print(state["Etot"]["energy"])
      state["Etot"]["energy"] = prev_temp+int(2600*24 - random.choice([-1, 1])*random.randint(0, 1000))
    state["Etot"]["energyDif"] = state["Etot"]["energy"] - prev_temp
    if((days.index(day) == 0) and hour==0 and mins==0):
        state["Etot"]["energyDif"] = 0

def sensorW1(state): # temperature changes and the warmest time of the day is 13:30, Monday is on average the coldest day and Sunday is on average the warmest day
    prev_temp = state["W1"]["water"]

    if ((days.index(day) == 6) and (hour + mins/60) >= 16 and (hour + mins/60) <= 16.5): # On Sunday at 16:00 the temperature sensor malfunctioned
        state["W1"]["water"] = 250
        state["alarm"]["status"]=1
    else:
        state["W1"]["water"] = 1-random.uniform(0, 1)#int(200 - 0.75*( abs(hour - 13.5 + mins/60))) + days.index(day) 
    state["W1"]["waterDif"] = state["W1"]["water"] - prev_temp
    if((days.index(day) == 0) and hour==0 and mins==0):
        state["W1"]["waterDif"] = 0

def sensorWtot(state): # temperature changes and the warmest time of the day is 13:30, Monday is on average the coldest day and Sunday is on average the warmest day
    prev_temp = state["Wtot"]["water"]
    if(hour==0 and mins==0):
      #print(state["Wtot"]["water"])
      state["Wtot"]["water"] = prev_temp+int(110 - random.choice([-1, 1])*random.randint(0, 10))
      state["Wtot"]["waterDif"] = state["Wtot"]["water"] - prev_temp
    if((days.index(day) == 0) and hour==0 and mins==0):
        state["Wtot"]["waterDif"] = 0

# def sensorMov1(state): # Motion sensor in the living room can be triggered by John between 8:00 -8:30 and 17:30-00:00 on weekdays and between 9:00-24:00 on weekends
#     # state["Mov1"]["status"] = 0
#     lb_mins=mins-15
#     upb_mins=mins
#     if mins==0:
#       lb_mins=45
#       upb_mins=59


#     state_move
#     if days.index(day) <= 4: 
#         if ((hour + mins/60) >= 8 and (hour + mins/60) < 10 ):
#             state["Mov1"]["status"] = int((random.randint(0, 100) > 75 ))
#         elif ((hour + mins/60) >= 16):
#             state["Mov1"]["status"] = int((random.randint(0, 100) > 75 ))
#     else:
#         if ((hour + mins/60) >= 9):
#             state["Mov1"]["status"] = int((random.randint(0, 100) > 65 ))

# def retrochronized(state):
# sensorEtot(state)
# state["Etot"]["energy"]+
# state["Etot"]["energy"] = state["Etot"]["energy"]+int(2600*24 - random.choice([-1, 1])*random.randint(0, 1000))

previous_hetero1="2023/01/17 00:00:00.0"
previous_hetero2="2023/01/17 00:00:00.0"

date_format_str = '%Y/%m/%d %H:%M:%S.%f'
previous_hetero1 = datetime.strptime(previous_hetero1, date_format_str)
previous_hetero2 = datetime.strptime(previous_hetero2, date_format_str)

def is_time_for_out_of_time1(day,hours,minutes): #kathe 5 ores
    heterogeneous_date_time="2023/01/"+str(day)+" "+str(hours)+":"+str(minutes)+":"+"00.0"
    date_format_str = '%Y/%m/%d %H:%M:%S.%f'
    print(day,hours,minutes,file=sys.stderr)

    given_time = datetime.strptime(heterogeneous_date_time, date_format_str)

    final_time = given_time - timedelta(hours=5)
    global previous_hetero1
    if final_time==previous_hetero1:
      previous_hetero1=given_time
      return True
    else:
      return False

is_time_for_out_of_time1(10,13,10)

def is_time_for_out_of_time1(day,hours,minutes): #kathe 5 ores
    heterogeneous_date_time="2023/01/"+str(day)+" "+str(hours)+":"+str(minutes)+":"+"00.0"
    date_format_str = '%Y/%m/%d %H:%M:%S.%f'
    # print(day,hours,minutes,file=sys.stderr)
    global previous_hetero1
    given_time = datetime.strptime(heterogeneous_date_time, date_format_str)

    final_time = given_time - timedelta(hours=5)
    # print(final_time,given_time,file=sys.stderr)
    if final_time==previous_hetero1:
      # print(day,hours,minutes,file=sys.stderr)
      previous_hetero1=given_time
      return True
    else:
      return False

def is_time_for_out_of_time2(day,hours,minutes): #kathe 30 ores
    heterogeneous_date_time="2023/01/"+str(day)+" "+str(hours)+":"+str(minutes)+":"+"00.0"
    date_format_str = '%Y/%m/%d %H:%M:%S.%f'
    global previous_hetero2
    given_time = datetime.strptime(heterogeneous_date_time, date_format_str)

    final_time = given_time - timedelta(hours=30)
    # print(final_time,given_time,file=sys.stderr)
    if final_time==previous_hetero2:
      # print(day,hours,minutes,file=sys.stderr)
      previous_hetero2=given_time
      return True
    else:
      return False

def print_out_of_time1(day,hours,min): #print for 2 days before
    heterogeneous_date_time="2023/01/"+str(day)+" "+str(hours)+":"+str(min)+":"+"00.0"
    date_format_str = '%Y/%m/%d %H:%M:%S.%f'
    
    given_time = datetime.strptime(heterogeneous_date_time, date_format_str)

    final_time = given_time - timedelta(days=1)

    #back to integers
    days1 = int(final_time.strftime('%j'))
    hour1 = int(final_time.strftime('%H'))
    mins1 = int(final_time.strftime('%M'))
    
    #printing the time
    if(hour<10):
        print('"2023-01-',days1, ' 0', hour1,':', sep='', end='')
    else:
        print('"2023-01-',days1, ' ', hour1,':', sep='', end='')
    if(mins1==0):
        print('0',mins1,':00":',sep='',end='')
    else:
        print(mins1,':00":',sep='',end='')

    # print('{',end=' ')
    state1={"W1" : { "water" : 0, "waterDif" : 0 },"alarm":{"status":0}}
    sensorW1(state1)
    print('{',end=' ')
    for k,v in state1.items():
        print(json.dumps(k),' : ',sep='', end='')
        print(json.dumps(v), end='')
        if(k!='alarm'):
            print(', ',end='')
    if (day == 6 and hour==23 and mins==45):
        print('}')
    else:
        print('},')
    
def print_out_of_time2(day,hours,min): #print for 10 days before
    heterogeneous_date_time="2023/01/"+str(day)+" "+str(hours)+":"+str(min)+":"+"00.0"
    date_format_str = '%Y/%m/%d %H:%M:%S.%f'
    
    given_time = datetime.strptime(heterogeneous_date_time, date_format_str)

    final_time = given_time - timedelta(days=10)

    #back to integers
    days1 = int(final_time.strftime('%j'))
    hour1 = int(final_time.strftime('%H'))
    mins1 = int(final_time.strftime('%M'))
    
    #printing the time
    if(hour<10):
        print('"2023-01-',days1, ' 0', hour1,':', sep='', end='')
    else:
        print('"2023-01-',days1, ' ', hour1,':', sep='', end='')
    if(mins1==0):
        print('0',mins1,':00":',sep='',end='')
    else:
        print(mins1,':00":',sep='',end='')

    print('{',end=' ')
    state1={"W1" : { "water" : 0, "waterDif" : 0},"alarm":{"status":0}}
    sensorW1(state1)
    # print('{',end=' ')
    for k,v in state1.items():
        print(json.dumps(k),' : ',sep='', end='')
        print(json.dumps(v), end='')
        if(k!='alarm'):
            print(', ',end='')
    if (day == 6 and hour==23 and mins==45):
        print('}')
    else:
        print('},')

def print_state(state):#,day,hours,min):
    print('{',end=' ')
    for k,v in state.items():
        print(json.dumps(k),' : ',sep='', end='')
        print(json.dumps(v), end='')
        if(k!='alarm'):
            print(', ',end='')
    if (days.index(day) == 6 and hour==23 and mins==45):
        print('}')
    # elif ((hours>=8) and (hours<=9))or((hours>17) and (hours<=18)):
    #     print('},',end='')
    #     print_mov_state(day,hours,min)
    # elif is_time_for_out_of_time1(day,hours,min):
    #    print_out_of_time1(day,hours,min)
    # elif is_time_for_out_of_time2(day,hours,min):
    #    print_out_of_time2(day,hours,min)
    else:
        print('},')
    return

#prints data from movement sensor between 8 to 9 and 17 to 18

def print_mov_state(day,hours,min):
    if(hours==12 and min==15):
      for i in range(10):
        #translate to datetime format
        heterogeneous_date_time="2023/01/"+str(day)+" "+str(hours)+":"+str(min)+":"+"00.0"
        date_format_str = '%Y/%m/%d %H:%M:%S.%f'
        
        given_time = datetime.strptime(heterogeneous_date_time, date_format_str)

        final_time = given_time + timedelta(minutes=5)
        
        #back to integers
        days = int(final_time.strftime('%j'))
        hour = int(final_time.strftime('%H'))
        mins = int(final_time.strftime('%M'))

        #printing timestamp

        if(hour<10):
            print('"2023-01-',day, ' 0', hour,':', sep='', end='')
        else:
            print('"2023-01-',day, ' ', hour,':', sep='', end='')
        if(mins==0):
            print('0',mins,':00":',sep='',end='')
        else:
            print(mins,':00":',sep='',end='')
        print('{',end=' ')

        state={"Mov1" : { "status" : 1 },"alarm" : { "status" : 0 }}
        for k,v in state.items():
            print(json.dumps(k),' : ',sep='', end='')
            print(json.dumps(v), end='')
            if(k!='alarm'):
                print(', ',end='')
        if (day == 6 and hour==23 and mins==45):
            print('}')
        else:
            print('},')
        return
    if ((hours>=8) and (hours<=9))or((hours>17) and (hours<=18)):
      for i in range(10):
        #translate to datetime format
        heterogeneous_date_time="2023/01/"+str(day)+" "+str(hours)+":"+str(min)+":"+"00.0"
        date_format_str = '%Y/%m/%d %H:%M:%S.%f'
        
        given_time = datetime.strptime(heterogeneous_date_time, date_format_str)

        final_time = given_time + timedelta(minutes=random.randint(0, 10))
        
        #back to integers
        days = int(final_time.strftime('%j'))
        hour = int(final_time.strftime('%H'))
        mins = int(final_time.strftime('%M'))

        #printing timestamp

        if(hour<10):
            print('"2023-01-',day, ' 0', hour,':', sep='', end='')
        else:
            print('"2023-01-',day, ' ', hour,':', sep='', end='')
        if(mins==0):
            print('0',mins,':00":',sep='',end='')
        else:
            print(mins,':00":',sep='',end='')
        print('{',end=' ')

        state={"Mov1" : { "status" : 1 },"alarm" : { "status" : 0 }}
        for k,v in state.items():
            print(json.dumps(k),' : ',sep='', end='')
            print(json.dumps(v), end='')
            if(k!='alarm'):
                print(', ',end='')
        if (day == 6 and hour==23 and mins==45):
            print('}')
        else:
            print('},')
        return

def print_mov_state_burglary(day,hours,mins):
    # print(day,hours,mins,file=sys.stderr)
    if day == 4:
        # print(day,hours,mins,file=sys.stderr)
        if (((hours + mins/60) >= 2) and ((hours + mins/60) <= 2.5)):
          # print(day,hours,mins,file=sys.stderr)
          for i in range(10):
            #translate to datetime format
            heterogeneous_date_time="2023/01/"+str(day)+" "+str(hours)+":"+str(mins)+":"+"00.0"
            date_format_str = '%Y/%m/%d %H:%M:%S.%f'
            
            given_time = datetime.strptime(heterogeneous_date_time, date_format_str)

            final_time = given_time + timedelta(minutes=random.randint(0, 10))
            
            #back to integers
            days = int(final_time.strftime('%j'))
            hour = int(final_time.strftime('%H'))
            mins = int(final_time.strftime('%M'))

            #printing timestamp

            if(hour<10):
                print('"2023-01-',day+17, ' 0', hour,':', sep='', end='')
            else:
                print('"2023-01-',day, ' ', hour,':', sep='', end='')
            if(mins==0):
                print('0',mins,':00":',sep='',end='')
            else:
                print(mins,':00":',sep='',end='')
            print('{',end=' ')

            state={"Mov1" : { "status" : 1 },"alarm" : { "status" : 1 }}
            for k,v in state.items():
                print(json.dumps(k),' : ',sep='', end='')
                print(json.dumps(v), end='')
                if(k!='alarm'):
                    print(', ',end='')
            if (day == 6 and hour==23 and mins==45):
                print('}')
            else:
                print('},')
            return

# test_state=test_state.copy()
# day=days[3]
# hour=0
# mins=30

# sensorTemp(test_state)
# test_state

#HVAC sensors

def diakopi_revmatos(state): # On Wednesday at 12:00-14:00 there was a blackout
    if days.index(day) == 2:
        if (((hour + mins/60) >= 12) and ((hour + mins/60) <= 14)):
                state["HVAC1"]["energy"] = 0
                state["HVAC2"]["energy"] = 0
                state["MiAC1"]["energy"] = 0
                state["MiAC2"]["energy"] = 0
                state["alarm"]["status"] = 1
                # state["Etot"]["energy"] = 0


# def fire(state): # On Friday at 20:00 there was a fire in John's kitchen
#     state["sensorSmoke"]["status"] = 0
#     if days.index(day) == 4:
#         if ((hour + mins/60) == 20 or (hour + mins/60) == 20.25):
#             state["sensorSmoke"]["status"] = 1

        
# prev_state = state.copy()
# heterogeneous_date_time="2023/01/17 05:00:00.0"
# date_format_str = '%Y/%m/%d %H:%M:%S.%f'

# given_time = datetime.strptime(time_str, date_format_str)
print('{')
for day in days:
    for hour in range(24):
        for mins in range(0,60,15):
            if(hour<10):
                print('"2023-01-',days.index(day)+17, ' 0', hour,':', sep='', end='')
            else:
                print('"2023-01-',days.index(day)+17, ' ', hour,':', sep='', end='')
            if(mins==0):
                print('0',mins,':00":',sep='',end='')
            else:
                print(mins,':00":',sep='',end='')
            # date_time
            sensorTemp(state)
            sensorHVAC(state)
            sensorMiAC(state)
            sensorEtot(state)
            sensorW1(state)
            sensorWtot(state)
            diakopi_revmatos(state)
            print_state(state)
            # print("mov_state")
            print_mov_state(days.index(day)+17,hour,mins)
            if is_time_for_out_of_time1(days.index(day)+17,hour,mins):
              #  print(day,hour,mins,file=sys.stderr)
               print_out_of_time1(days.index(day)+17,hour,mins)
            if is_time_for_out_of_time2(days.index(day)+17,hour,mins):
               print(day,hour,mins,file=sys.stderr)
               print_out_of_time2(days.index(day)+17,hour,mins)
              #  print("HERE",file=sys.stderr)
            print_mov_state_burglary(days.index(day),hour,mins)
            prev_state = state.copy()
            # print(day,hour,mins,file=sys.stderr)

print('}')
# f.close()

# print("day,hour,mins",file=sys.stderr)

# from datetime import datetime
# from datetime import timedelta
# heterogeneous_date_time="2023/01/17 05:00:00.0"
# date_format_str = '%Y/%m/%d %H:%M:%S.%f'
# # create datetime object from timestamp string
# given_time = datetime.strptime(heterogeneous_date_time, date_format_str)
# print('Given Time: ', given_time)
# n = 5
# # Subtract 2 hours from datetime object
# final_time = given_time - timedelta(hours=n)
# print('Final Time (2 hours ahead of given time ): ', final_time)
# # Convert datetime object to string in specific format 
# final_time_str = final_time.strftime('%d/%m/%Y %H:%M:%S.%f')
# print('Final Time as string object: ', final_time_str)



